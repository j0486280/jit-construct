#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256

void removeNextline(char *p){
	int index=0;
	while(*p){
		if(*(p+index) == '\n'||*(p+index) == '\\'||*(p+index) == ' ') {
			index++;
			continue;
		}
		*p=*(p+index);
		p++;
	}
}

int continuous_count (char* p){
    char *ptr = p;
    int count = 0;
    while( *ptr == *p ){
        count++;
        ptr++;
    }
    return count;
}

int check_loops(char *p,int *index,int *mult){
    int res,offset = 0,_index = 0;
    if(*(p+1) != '-') return -1;
    p += 2;
    while( *p != ']' ){
        if( *p == '[' || *p == '-' || *p == '.' || *p == ',' )
            return -1; 
        res = continuous_count(p);
        if( *p == '>' ) offset += res;
        else if( *p == '<' ) offset -= res;
        else if( *p == '+' ){
            index[_index] = offset;
            mult[_index] = res;
            _index++;
        }
        p += res;
    }
    if( offset != 0 ) return -1;
    return _index;
}

int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x64 <inputfile>");
	dasm_State *state;
	initjit(&state, actions);

	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING;
	int copy_index[10],copy_mult[10],res,i,j;
	
	// Function prologue.
	|  push PTR
	|  mov  PTR, rdi      // rdi store 1st argument

	char *p = read_file(argv[1]);
	for (removeNextline(p);*p; p++) {
		switch (*p) {
		case '>':
			res = continuous_count(p);
			p+=res-1;
			if(res == 1)
				|  inc  PTR
			else
				|  add  PTR, res
			break;
		case '<':
			res = continuous_count(p);
			p+=res-1;
			if(res == 1)
				|  dec  PTR
			else
				|  sub  PTR, res
			break;
		case '+':
			res = continuous_count(p);
			p+=res-1;
			if(res == 1)
				|  inc  byte [PTR]
			else
				|  add  byte [PTR], res
			break;
		case '-':
			res = continuous_count(p);
			p+=res-1;
			if(res == 1)
				|  dec  byte [PTR]
			else
				|  sub  byte [PTR], res
			break;
		case '.':
			|  movzx edi, byte [PTR]
			|  callp putchar
			break;
		case ',':
			|  callp getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			if (top == limit) err("Nesting too deep.");
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.
			
			res = check_loops(p,copy_index,copy_mult);
			if(res != -1){	
				|mov cl,byte[PTR]
				for(i=0;i<res;i++){
					for(j=0;j<copy_mult[i];j++){
						|	add byte[PTR+copy_index[i]], cl
					}
				}
				|mov byte[PTR], 0
				while(*p!=']') p++;
				break;
			}

			maxpc += 2;
			*top++ = maxpc;
			dasm_growpc(&state, maxpc);
			|  cmp  byte [PTR], 0
			|  je   =>(maxpc-2)
			|=>(maxpc-1):
			break;
		case ']':
			if (top == pcstack) err("Unmatched ']'");
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}
	
	// Function epilogue.
	|  pop  PTR
	|  ret

	void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}
